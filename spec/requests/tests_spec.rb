require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/tests", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Test. As you add validations to Test, be sure to
  # adjust the attributes here as well.
  
  let(:list2) {
    FactoryBot.create_list(:test,2)   
  }
  let(:valid_test) {
    FactoryBot.create(:test)   
  }
  let!(:my_test) { FactoryBot.create(:test) }
  let(:valid_attributes){
   {test: { name: Faker::Name.name,
    description: Faker::Name.name,
    
         questions_attributes:  [
            {
                "label": Faker::Name.name,
                "description": Faker::Name.name,
                "options_attributes": [
                    {
                        "title": Faker::Name.name,
                        "is_correct": false
                    },
                    {
                        "title": "title2",
                        "is_correct": true
                    }
                ]
            }
        ]
    
 
   }}}
  
  let(:invalid_attributes) {{test: { name: Faker::Name.name,description: Faker::Name.name}}}
  let(:invalid_attributes_options) {{test: { name: Faker::Name.name,description: Faker::Name.name,questions_attributes: [ {
        "label": Faker::Name.name,
        "description": Faker::Name.name }]}}}

  let(:invalid_attributes_no_correct){
    {test: { name: Faker::Name.name,
     description: Faker::Name.name,
          questions_attributes:  [
             {
                 "label": Faker::Name.name,
                 "description": Faker::Name.name,
                 "options_attributes": [
                     {
                         "title": Faker::Name.name,
                         "is_correct": false}]}]}}}
  let(:user) { FactoryBot.create(:user) }
  let(:user_token){JsonWebToken.encode(user_id: user.id)}
  let(:teacher) { FactoryBot.create(:teacher) }
  let(:teacher_token){JsonWebToken.encode(user_id: teacher.id)}
  let(:student) { FactoryBot.create(:student) }
  let(:student_token){JsonWebToken.encode(user_id: student.id)}
  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # TestsController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) {
    {}
  }

  describe "GET /index" do
    before {
      
      list2
      get '/api/v1/tests', headers: {Authorization:  user_token  }
    }
    it "teacher can get tests" do
      expect(response.status).to eq(200)
    end

    it "teacher can get tests with number of question" do
      
      expect(json[0]["question_count"]).to eq(1)
    end

    it "should return 2 test" do
      
      expect(json.size).to eq(3)
    end

    it "student can get tests" do
      expect(response.status).to eq(200)
    end

    it "renders a unauthorized response for no user" do
      get '/api/v1/tests'
      expect(response.status).to eq(401)
    end

  end

  describe "GET /show" do
  
    it "renders a successful response with questions and options" do
      valid_test
      get '/api/v1/tests/'+valid_test.id.to_s, headers: {Authorization:  teacher_token  }
      expect(response.status).to eq(200)
      expect(json['questions'].size).to eq(1)
      expect(json['questions'][0]['options'].size).to eq(valid_test.questions[0].options.count)
    end

    it "rejects unauthintcated user" do
      valid_test
      get '/api/v1/tests/'+valid_test.id.to_s
      expect(response.status).to eq(401)

    end
  end

  describe "POST /create" do
    context "with valid parameters" do
     
      
      it "rejects unauthintcated user" do
        post '/api/v1/tests', params: valid_attributes
        expect(response.status).to eq(401)
      end

      it "teachers can create test" do
        post '/api/v1/tests', params: valid_attributes, headers: {Authorization:  teacher_token  }
        expect(json['name']).to eq(valid_attributes[:test][:name])
      end

      it "student cannot create test" do
        post '/api/v1/tests', params: valid_attributes, headers: {Authorization:  student_token  }
        expect(json['message']).to eq("You are not authorized to perform this action.")
      end

    end

    context "with invalid parameters" do


      it "can not save test without questions" do
        post '/api/v1/tests', params: invalid_attributes, headers: {Authorization:  teacher_token  }
        expect(json['questions'][0]).to eq("can't be blank")
      end

      it "can not save test without options" do
        post '/api/v1/tests', params: invalid_attributes_options, headers: {Authorization:  teacher_token  }
        expect(json['questions.options'][0]).to eq("can't be blank")
      end

      it "can not save test without correct options" do
        post '/api/v1/tests', params: invalid_attributes_no_correct, headers: {Authorization:  teacher_token  }
        expect(json['questions.options'][0]).to eq("at least one option must be correct")
      end

    end
  end
  
    describe "PATCH /update" do
      context "with valid parameters" do
        let(:new_attributes) {
          skip("Add a hash of attributes valid for your model")
        }

        it "changes the name" do
          test = valid_test
          newname=Faker::Name.name
          patch '/api/v1/tests/'+valid_test.id.to_s,params: { test: {name: newname} }, headers: {Authorization:  teacher_token  }
          expect(json['name']).to eq(newname)
        end
        it "Student can not change test" do
          test = valid_test
          newname=Faker::Name.name
          patch '/api/v1/tests/'+valid_test.id.to_s,params: { test: {name: newname} }, headers: {Authorization:  student_token  }
          expect(json['message']).to eq("You are not authorized to perform this action.")
        end

      end

      context "with invalid parameters" do
        it "changes the name" do
          test = valid_test
          newname=nil
          patch '/api/v1/tests/'+valid_test.id.to_s, params: { test: {name: newname} },headers: {Authorization:  teacher_token  }
          expect(json['name'][0]).to eq("can't be blank")
        end
      end
    end

  describe "DELETE /destroy" do
    it "destroys the requested test" do
      test = valid_test
      expect {
        delete '/api/v1/tests/'+valid_test.id.to_s, headers: {Authorization:  teacher_token  }, as: :json
      }.to change(Test, :count).by(-1)
    end

    it "student can not destroy test" do
      test = valid_test
      delete '/api/v1/tests/'+valid_test.id.to_s, headers: {Authorization:  student_token  }, as: :json
      expect(json['message']).to eq("You are not authorized to perform this action.")

    end

  end
end
