require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to user the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/users", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Test. As you add validations to Test, be sure to
  # adjust the attributes here as well.
  
  let(:list2) {
    FactoryBot.create_list(:teacher,2)   
  }
  let(:valid_user) {
    FactoryBot.create(:teacher)   
  }
  # let!(:my_user) { FactoryBot.create(:user) }
  let(:valid_attributes_teacher){{user:{
    name: Faker::Name.name,
    email:  Faker::Internet.email,
    password: Faker::Internet.password ,
    type: 'Teacher'
    }}}

    let(:valid_attributes_student){{user:{
      name: Faker::Name.name,
      email:  Faker::Internet.email,
      password: Faker::Internet.password,
      type: 'Student'}}}
    
  
  # let(:user) { FactoryBot.create(:user) }
  # let(:teacher_token){JsonWebToken.encode(user_id: user.id)}
  let(:teacher) { FactoryBot.create(:teacher) }
  let(:teacher_token){JsonWebToken.encode(user_id: teacher.id)}
  let(:student) { FactoryBot.create(:student) }
  let(:student_token){JsonWebToken.encode(user_id: student.id)}
  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # TestsController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) {
    {}
  }

  describe "GET /index" do
    before {
      
      list2
    }
    it "teacher can get users" do
      get '/api/v1/users', headers: {Authorization:  teacher_token  }
      expect(response.status).to eq(200)
    end


    it "student can not get users" do
      get '/api/v1/users', headers: {Authorization:  student_token  }
      expect(json['message']).to eq("You are not authorized to perform this action.")
    end

    it "renders a unauthorized response for no user" do
      get '/api/v1/users'
      expect(response.status).to eq(401)
    end

  end

  describe "GET /show" do
  
    it "renders a successful response" do
      valid_user
      get '/api/v1/users/'+valid_user.id.to_s, headers: {Authorization:  teacher_token  }
      expect(response.status).to eq(200)
     
    end

    it "student can not get user" do
      valid_user
      get '/api/v1/users/'+valid_user.id.to_s, headers: {Authorization:  student_token  }
      expect(json['message']).to eq("You are not authorized to perform this action.")
     
    end

    it "rejects unauthintcated user" do
      valid_user
      get '/api/v1/users/'+valid_user.id.to_s
      expect(response.status).to eq(401)

    end
  end

  describe "POST /create" do
    context "with valid parameters" do
     
      
      it "rejects unauthintcated user" do
        post '/api/v1/users', params: valid_attributes_teacher
        expect(response.status).to eq(401)
      end

      it "teachers can create teachers" do
        post '/api/v1/users', params: valid_attributes_teacher, headers: {Authorization:  teacher_token  }
        expect(json['name']).to eq(valid_attributes_teacher[:user][:name])
      end

      it "teachers can create students" do
        post '/api/v1/users', params: valid_attributes_teacher, headers: {Authorization:  teacher_token  }
        expect(json['name']).to eq(valid_attributes_teacher[:user][:name])
      end
      it "student cannot create user" do
        post '/api/v1/users', params: valid_attributes_teacher, headers: {Authorization:  student_token  }
        expect(json['message']).to eq("You are not authorized to perform this action.")
      end

    end

    context "with invalid parameters" do


      it "can not save user without email" do
        attr=valid_attributes_teacher
        attr[:user][:email]=nil
        post '/api/v1/users', params: attr, headers: {Authorization:  teacher_token  }
        expect(json['email'][0]).to eq("can't be blank")
      end

      it "can not use already exist email" do
        user=valid_user
        attr=valid_attributes_teacher
        attr[:user][:email]=valid_user.email
        post '/api/v1/users', params: attr, headers: {Authorization:  teacher_token  }
        expect(json['email'][0]).to eq("has already been taken")
      end

      

    end
  end
  
    describe "PATCH /update" do
      context "with valid parameters" do
 

        it "changes the name" do
          user = valid_user
          newname=Faker::Name.name
          patch '/api/v1/users/'+valid_user.id.to_s,params: { user: {name: newname} }, headers: {Authorization:  teacher_token  }
          expect(json['name']).to eq(newname)
        end
        it "Student can not change user" do
          user = valid_user
          newname=Faker::Name.name
          patch '/api/v1/users/'+valid_user.id.to_s,params: { user: {name: newname} }, headers: {Authorization:  student_token  }
          expect(json['message']).to eq("You are not authorized to perform this action.")
        end

      end

      context "with invalid parameters" do
        it "changes the name" do
          user = valid_user
          patch '/api/v1/users/'+valid_user.id.to_s, params: { user: {email: nil} },headers: {Authorization:  teacher_token  }
          expect(json['email'][0]).to eq("can't be blank")
        end
      end
    end

  describe "DELETE /destroy" do
    it "destroys the requested user" do
      user = valid_user
      expect {
        delete '/api/v1/users/'+valid_user.id.to_s, headers: {Authorization:  teacher_token  }, as: :json
      }.to change(User, :count).by(0)
    end

    it "student can not destroy user" do
      user = valid_user
      delete '/api/v1/users/'+valid_user.id.to_s, headers: {Authorization:  student_token  }, as: :json
      expect(json['message']).to eq("You are not authorized to perform this action.")

    end

  end
end
